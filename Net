class Net(nn.Module):
    def __init__(self, input_size, hidden_size0, hidden_size1, hidden_size2,  output_size):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size0)
        self.act1 = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size0, hidden_size1)        
        self.act2 = nn.ReLU()
        
        self.fc3 = nn.Linear(hidden_size1, hidden_size2)        
        self.act3 = nn.ReLU() 
        
        self.fc4 = nn.Linear(hidden_size2, output_size)        
        self.act4 = nn.ReLU() 
        
        
        
    def forward(self, x):
        x = self.fc1(x)
        x = self.act1(x)
        
        x = self.fc2(x)
        x = self.act2(x)
        
        x = self.fc3(x)
        x = self.act3(x)
        
        x = self.fc4(x)
        x = self.act4(x)
        
    
       
        return torch.sigmoid(x)

def calculate_rmse(model, X, y):
    model.eval()
    with torch.no_grad():
        inputs = torch.Tensor(X)
        labels = torch.Tensor(y).view(-1, 1)
        outputs = model(inputs)
        rmse = torch.sqrt(nn.MSELoss()(outputs, labels))
        return rmse.item()

def train_model(model, criterion, optimizer, X_trai0n, y_train, X_val, y_val, epochs=100, patience=10):
    model.train()
    best_val_rmse = float('inf')
    epochs_without_improvement = 0
    
    for epoch in range(epochs):
        inputs =  X_train.values
        labels = y_train.values
        optimizer.zero_grad()  
        outputs = model(inputs) 
        loss = criterion(outputs, labels)  
        loss.backward()  
        optimizer.step()  

        if (epoch + 1) % 1000 == 0:  
            train_rmse = calculate_rmse(model, X_train, y_train)
            val_rmse = calculate_rmse(model, X_val, y_val)
            print(f'Epoch [{epoch + 1}/{epochs}], Loss: {loss.item():.4f}, Train RMSE: {train_rmse:.4f}, Val RMSE: {val_rmse:.4f}')
            
            if val_rmse < best_val_rmse:
                best_val_rmse = val_rmse
                epochs_without_improvement = 0
            else:
                epochs_without_improvement += 1
                
            if epochs_without_improvement >= patience:
                print("Ранняя остановка: остановка обучения.")
                break
